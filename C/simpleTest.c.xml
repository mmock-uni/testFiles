<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="simpleTest.c"><comment type="block">/*
* COMMENTS fixme i have some errors
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>a</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
    	<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    	<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is two\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    	<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is three\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    	<default>default:</default> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is something\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>b</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//something's gone wrong</comment>
    <switch>switch<condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
    	<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is two\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is three\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	<default>default:</default> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is something\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>c</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
    	<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is two\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a is three\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
